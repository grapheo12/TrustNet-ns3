#include "main.h"

NS_LOG_COMPONENT_DEFINE("TrustNet_Main");


int
main(int argc, char* argv[])
{
    LogComponentEnable("RIBAdStore", LOG_LEVEL_ALL);
    LogComponentEnable("RIBLinkStateManager", LOG_LEVEL_ALL);

    LogComponentEnable("TrustNet_Main", LOG_LEVEL_ALL);

    // BRITE needs a configuration file to build its graph. By default, this
    // example will use the TD_ASBarabasi_RTWaxman.conf file. There are many others
    // which can be found in the BRITE/conf_files directory
    std::string confFile = "scratch/trustnet/brite-conf.conf";
    bool tracing = false;
    bool nix = true;

    CommandLine cmd(__FILE__);
    cmd.AddValue("confFile", "BRITE conf file", confFile);
    cmd.AddValue("tracing", "Enable or disable ascii tracing", tracing);
    cmd.AddValue("nix", "Enable or disable nix-vector routing", nix);

    cmd.Parse(argc, argv);

    // Invoke the BriteTopologyHelper and pass in a BRITE
    // configuration file and a seed file. This will use
    // BRITE to build a graph from which we can build the ns-3 topology
    BriteTopologyHelper bth(confFile);
    bth.AssignStreams(3);

    PointToPointHelper p2p;

    InternetStackHelper stack;

    if (nix)
    {
        Ipv4NixVectorHelper nixRouting;
        stack.SetRoutingHelper(nixRouting);
    }

    Ipv4AddressHelper address;
    address.SetBase("10.0.0.0", "255.255.255.224");

    bth.BuildBriteTopology(stack);
    bth.AssignIpv4Addresses(address);

    int cnt = 0;

    NS_LOG_INFO("Number of AS created " << bth.GetNAs());
    // for (uint32_t i = 0; i < bth.GetNAs(); i++){
    //     NS_LOG_INFO("Number of nodes in AS" << i << ": " << bth.GetNNodesForAs(i));
    //     for (uint32_t j = 0; j < bth.GetNNodesForAs(i); j++){
    //         auto Node = bth.GetNodeForAs(i, j);
    //         NS_LOG_INFO("\t" << "AS: " << i << " Node: " << j << " Number of devices: " << Node->GetNDevices());
    //         if (Node->GetNDevices() > 2){
    //             for (uint32_t k = 0; k < Node->GetNDevices(); k++){
    //                 auto addr = Node->GetDevice(k)->GetAddress();
    //                 NS_LOG_INFO("\t\t" << "AS: " << i << " Switch: " << j << " Device: " << k << " Addr: " << addr);
    //             }
    //         }else{
    //             auto addr = Node->GetDevice(1)->GetAddress();
    //             NS_LOG_INFO("\t\t" << "AS: " << i << " Leaf: " << j << " Addr: " << addr);            
    //         }
    //     }
    //     NS_LOG_INFO("Number of leaf nodes in AS" << i << ": " << bth.GetNLeafNodesForAs(i));
    //     for (uint32_t j = 0; j < bth.GetNLeafNodesForAs(i); j++){
    //         auto leafNode = bth.GetLeafNodeForAs(i, j);
    //         NS_LOG_INFO("\t" << "AS: " << i << " Leaf: " << j << " Number of devices: " << leafNode->GetNDevices());
    //         if (leafNode->GetNDevices() > 2){
    //             for (uint32_t k = 0; k < leafNode->GetNDevices(); k++){
    //                 auto addr = leafNode->GetDevice(k)->GetAddress();
    //                 NS_LOG_INFO("\t\t" << "AS: " << i << " Switch: " << j << " Device: " << k << " Addr: " << addr);
    //             }
    //         }else{
    //             auto addr = leafNode->GetDevice(1)->GetAddress();
    //             NS_LOG_INFO("\t\t" << "AS: " << i << " Leaf: " << j << " Addr: " << addr);            
    //         }
    //     }
    // }

    // The BRITE topology generator generates a topology of routers.  Here we create
    // two subnetworks which we attach to router leaf nodes generated by BRITE
    // Any NS3 topology may be used to attach to the BRITE leaf nodes but here we
    // use just one node

    NodeContainer client;
    NodeContainer server;
    NodeContainer overlaySwitch;

    client.Create(1);
    stack.Install(client);
    server.Create(1);
    stack.Install(server);
    overlaySwitch.Create(1);
    stack.Install(overlaySwitch);

    int numLeafNodesInAsNine = bth.GetNLeafNodesForAs(9);
    client.Add(bth.GetLeafNodeForAs(9, numLeafNodesInAsNine - 1));
    server.Add(bth.GetLeafNodeForAs(9, numLeafNodesInAsNine - 2));
    overlaySwitch.Add(bth.GetLeafNodeForAs(9, numLeafNodesInAsNine - 3));

    p2p.SetDeviceAttribute("DataRate", StringValue("5Mbps"));
    p2p.SetChannelAttribute("Delay", StringValue("2ms"));

    NetDeviceContainer p2pClientDevices;
    NetDeviceContainer p2pServerDevices;
    NetDeviceContainer p2pOverlaySwitchDevices;

    p2pClientDevices = p2p.Install(client);
    p2pServerDevices = p2p.Install(server);
    p2pOverlaySwitchDevices = p2p.Install(overlaySwitch);

    address.SetBase("11.1.0.0", "255.255.0.0");
    Ipv4InterfaceContainer clientInterfaces;
    clientInterfaces = address.Assign(p2pClientDevices);

    address.SetBase("13.2.0.0", "255.255.0.0");
    Ipv4InterfaceContainer serverInterfaces;
    serverInterfaces = address.Assign(p2pServerDevices);

    address.SetBase("15.2.0.0", "255.255.0.0");
    Ipv4InterfaceContainer overlaySwitchInterfaces;
    overlaySwitchInterfaces = address.Assign(p2pOverlaySwitchDevices);

    RIB rib1(serverInterfaces.GetAddress(0));
    ApplicationContainer serverApps(rib1.Install(server.Get(0)));
    serverApps.Start(Seconds(0.5));
    serverApps.Stop(Seconds(15.0));

    ns3::ObjectFactory fac;
    fac.SetTypeId(DCServerAdvertiser::GetTypeId());

    Ptr<DCServerAdvertiser> echoClient = fac.Create<DCServerAdvertiser>();
    echoClient->SetRemote(rib1.my_addr, RIBADSTORE_PORT);
    echoClient->SetAttribute("MaxPackets", UintegerValue(100));
    echoClient->SetAttribute("Interval", TimeValue(Seconds(1.)));
    echoClient->SetAttribute("PacketSize", UintegerValue(1024));

    for (int i = 0; i < 10; i++){
        echoClient->dcNameList.push_back("Shubham Mishra");
    }

    client.Get(0)->AddApplication(echoClient);
    ApplicationContainer clientApps(echoClient);
    clientApps.Start(Seconds(0.8));
    clientApps.Stop(Seconds(15.0));

    OverlaySwitch oswitch1(overlaySwitchInterfaces.GetAddress(0), serverInterfaces.GetAddress(0));
    ApplicationContainer oswitchApps(oswitch1.Install(overlaySwitch.Get(0)));
    oswitchApps.Start(Seconds(0.9));
    oswitchApps.Stop(Seconds(15.0));

    if (!nix)
    {
        Ipv4GlobalRoutingHelper::PopulateRoutingTables();
    }

    if (tracing)
    {
        AsciiTraceHelper ascii;
        p2p.EnableAsciiAll(ascii.CreateFileStream("briteLeaves.tr"));
    }
    // Run the simulator
    Simulator::Stop(Seconds(15.0));
    Simulator::Run();
    Simulator::Destroy();

    return 0;
}
